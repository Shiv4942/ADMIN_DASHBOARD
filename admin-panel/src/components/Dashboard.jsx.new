import React, { useEffect, useState, useCallback, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { API_ENDPOINTS } from '../config/api';
import { 
  BookOpenIcon, 
  BoltIcon, 
  CurrencyDollarIcon, 
  UserGroupIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  ClockIcon,
  CheckCircleIcon,
  ArrowRightIcon,
  ExclamationCircleIcon,
  AcademicCapIcon,
  DocumentTextIcon,
  ChartBarIcon,
  UserIcon,
  ArrowPathIcon
} from '@heroicons/react/24/outline';

// Skeleton Loader Component
const SkeletonLoader = ({ className = '' }) => (
  <div className={`animate-pulse bg-gray-200 rounded ${className}`}></div>
);

// Activity type to icon mapping
const activityIcons = {
  workout: BoltIcon,
  course: AcademicCapIcon,
  finance: CurrencyDollarIcon,
  user: UserIcon,
  default: DocumentTextIcon
};

const Dashboard = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(null);

  const [stats, setStats] = useState({
    totalWorkouts: 0,
    coursesCompleted: 0,
    monthlyRevenue: 0,
    activeUsers: 0,
    monthlyChange: {
      workouts: 0,
      courses: 0,
      revenue: 0,
      users: 0
    }
  });

  const [recentActivities, setRecentActivities] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const activitiesPerPage = 5;

  const quickActions = useMemo(() => [
    { 
      id: 1, 
      title: 'Add Workout', 
      icon: BoltIcon, 
      color: 'bg-blue-500',
      action: 'workouts',
      path: '/workouts/new'
    },
    { 
      id: 2, 
      title: 'Analyze Income', 
      icon: CheckCircleIcon, 
      color: 'bg-green-500',
      action: 'meals',
      path: '/finances/new'
    },
    { 
      id: 3, 
      title: 'Start Course', 
      icon: BookOpenIcon, 
      color: 'bg-purple-500',
      action: 'courses',
      path: '/courses/start'
    },
    { 
      id: 4, 
      title: 'Add Project', 
      icon: CheckCircleIcon, 
      color: 'bg-orange-500',
      action: 'projects',
      path: '/projects/new'
    }
  ], []);

  const fetchDashboardData = useCallback(async (isRefresh = false) => {
    const controller = new AbortController();
    const { signal } = controller;
    
    try {
      if (!isRefresh) {
        setIsLoading(true);
      } else {
        setIsRefreshing(true);
      }
      setError(null);
      
      const timestamp = new Date().getTime();
      const response = await fetch(
        `${API_ENDPOINTS.DASHBOARD.OVERVIEW}?page=${currentPage}&limit=${activitiesPerPage}&_=${timestamp}`,
        {
          signal,
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      setStats(prev => ({
        ...prev,
        totalWorkouts: data.stats?.totalWorkouts || 0,
        coursesCompleted: data.stats?.coursesCompleted || 0,
        monthlyRevenue: data.stats?.monthlyRevenue || 0,
        activeUsers: data.stats?.activeUsers || 0,
        monthlyChange: {
          workouts: data.monthlyChange?.workouts || 0,
          courses: data.monthlyChange?.courses || 0,
          revenue: data.monthlyChange?.revenue || 0,
          users: data.monthlyChange?.users || 0
        }
      }));
      
      setRecentActivities(prev => data.recentActivities || []);
      setTotalPages(prev => data.totalPages || 1);
      setLastUpdated(new Date().toLocaleTimeString());
      
      return data;
    } catch (err) {
      if (err.name !== 'AbortError') {
        console.error('Error loading dashboard:', err);
        setError(`Failed to load dashboard data: ${err.message}`);
      }
      return null;
    } finally {
      if (!isRefresh) {
        setIsLoading(false);
      } else {
        setIsRefreshing(false);
      }
    }
  }, [currentPage, activitiesPerPage]);

  // Fetch data on component mount and when dependencies change
  useEffect(() => {
    const controller = new AbortController();
    
    // Initial fetch
    fetchDashboardData();
    
    // Set up auto-refresh every 30 seconds
    const refreshInterval = setInterval(() => {
      fetchDashboardData(true);
    }, 30000);
    
    // Cleanup function
    return () => {
      controller.abort();
      clearInterval(refreshInterval);
    };
  }, [fetchDashboardData]);
  
  // Handle manual refresh
  const handleRefresh = useCallback(() => {
    fetchDashboardData(true);
  }, [fetchDashboardData]);

  // Memoize the stats cards to prevent unnecessary re-renders
  const statsCards = useMemo(() => [
    {
      title: 'Total Workouts',
      value: stats.totalWorkouts,
      icon: BoltIcon,
      change: stats.monthlyChange.workouts,
      color: 'blue'
    },
    {
      title: 'Courses Completed',
      value: stats.coursesCompleted,
      icon: AcademicCapIcon,
      change: stats.monthlyChange.courses,
      color: 'purple'
    },
    {
      title: 'Monthly Revenue',
      value: stats.monthlyRevenue,
      icon: CurrencyDollarIcon,
      change: stats.monthlyChange.revenue,
      isCurrency: true,
      color: 'green'
    },
    {
      title: 'Active Users',
      value: stats.activeUsers,
      icon: UserGroupIcon,
      change: stats.monthlyChange.users,
      color: 'indigo'
    }
  ], [stats]);

  // Render loading state
  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <SkeletonLoader className="h-8 w-64 mb-2" />
            <SkeletonLoader className="h-4 w-48" />
          </div>
          <SkeletonLoader className="h-10 w-24" />
        </div>
        
        <div className="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
              <SkeletonLoader className="h-6 w-32 mb-2" />
              <SkeletonLoader className="h-8 w-20 mb-4" />
              <SkeletonLoader className="h-4 w-24" />
            </div>
          ))}
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div className="flex justify-between items-center mb-6">
            <SkeletonLoader className="h-6 w-48" />
            <SkeletonLoader className="h-8 w-24" />
          </div>
          <div className="space-y-4">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex items-center justify-between p-4 border-b border-gray-100">
                <div className="flex items-center space-x-4">
                  <SkeletonLoader className="h-10 w-10 rounded-full" />
                  <div>
                    <SkeletonLoader className="h-4 w-32 mb-2" />
                    <SkeletonLoader className="h-3 w-24" />
                  </div>
                </div>
                <SkeletonLoader className="h-4 w-20" />
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Render error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <ExclamationCircleIcon className="h-12 w-12 text-red-500 mb-4" />
        <div className="text-red-600 font-medium mb-4">Error Loading Dashboard</div>
        <p className="text-gray-600 mb-6 text-center max-w-md">{error}</p>
        <button
          onClick={fetchDashboardData}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center"
          disabled={isRefreshing}
        >
          {isRefreshing ? (
            <>
              <ArrowPathIcon className="animate-spin h-5 w-5 mr-2" />
              Refreshing...
            </>
          ) : (
            'Try Again'
          )}
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Dashboard Overview</h1>
          <p className="text-gray-600 mt-1">
            Welcome back! {lastUpdated && `Last updated at ${lastUpdated}`}
          </p>
        </div>
        <button
          onClick={handleRefresh}
          className={`mt-4 sm:mt-0 px-4 py-2 text-sm font-medium rounded-md flex items-center ${
            isRefreshing 
              ? 'bg-gray-200 text-gray-600 cursor-not-allowed' 
              : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'
          }`}
          disabled={isRefreshing}
        >
          <ArrowPathIcon 
            className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} 
          />
          {isRefreshing ? 'Refreshing...' : 'Refresh Data'}
        </button>
      </div>

      {/* Stats Grid */}
      <div className="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
        {statsCards.map((stat, index) => (
          <div 
            key={index}
            className="bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-500">{stat.title}</p>
                <p className="mt-1 text-2xl font-semibold text-gray-900">
                  {stat.isCurrency ? `$${stat.value.toLocaleString()}` : stat.value}
                </p>
              </div>
              <div className={`p-3 rounded-full bg-${stat.color}-100 text-${stat.color}-600`}>
                <stat.icon className="h-6 w-6" />
              </div>
            </div>
            <div className="mt-4 flex items-center text-sm">
              {stat.change >= 0 ? (
                <ArrowUpIcon className="h-4 w-4 text-green-500" />
              ) : (
                <ArrowDownIcon className="h-4 w-4 text-red-500" />
              )}
              <span className={`ml-1 ${stat.change >= 0 ? 'text-green-600' : 'text-red-600'} font-medium`}>
                {Math.abs(stat.change)}% {stat.change >= 0 ? 'increase' : 'decrease'} from last month
              </span>
            </div>
          </div>
        ))}
      </div>

      {/* Recent Activities */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900">Recent Activities</h2>
            <button 
              onClick={() => navigate('/activities')}
              className="text-sm text-blue-600 hover:text-blue-700 flex items-center"
            >
              View All <ArrowRightIcon className="ml-1 h-4 w-4" />
            </button>
          </div>
          
          {recentActivities.length > 0 ? (
            <div className="space-y-4">
              {recentActivities.map((activity, index) => {
                const ActivityIcon = activityIcons[activity.type] || activityIcons.default;
                return (
                  <div 
                    key={index} 
                    className="flex items-center justify-between p-4 hover:bg-gray-50 rounded-lg transition-colors"
                  >
                    <div className="flex items-center space-x-4">
                      <div className={`p-2 rounded-full ${activity.type === 'workout' ? 'bg-blue-100 text-blue-600' : 
                        activity.type === 'course' ? 'bg-purple-100 text-purple-600' : 
                        activity.type === 'finance' ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'}`}>
                        <ActivityIcon className="h-5 w-5" />
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{activity.title}</p>
                        <p className="text-xs text-gray-500">{activity.description}</p>
                      </div>
                    </div>
                    <div className="text-xs text-gray-400">
                      {new Date(activity.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                );
              })}
              
              {/* Pagination */}
              {totalPages > 1 && (
                <div className="flex justify-between items-center mt-6 pt-4 border-t border-gray-100">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className={`px-3 py-1 rounded-md ${currentPage === 1 ? 'text-gray-400 cursor-not-allowed' : 'text-blue-600 hover:bg-blue-50'}`}
                  >
                    Previous
                  </button>
                  <span className="text-sm text-gray-600">
                    Page {currentPage} of {totalPages}
                  </span>
                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className={`px-3 py-1 rounded-md ${currentPage === totalPages ? 'text-gray-400 cursor-not-allowed' : 'text-blue-600 hover:bg-blue-50'}`}
                  >
                    Next
                  </button>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-8">
              <DocumentTextIcon className="mx-auto h-12 w-12 text-gray-300" />
              <p className="mt-2 text-gray-500">No recent activities found</p>
              <button
                onClick={handleRefresh}
                className="mt-2 text-sm text-blue-600 hover:text-blue-700 flex items-center mx-auto"
                disabled={isRefreshing}
              >
                <ArrowPathIcon className={`h-4 w-4 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
                {isRefreshing ? 'Refreshing...' : 'Refresh'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
